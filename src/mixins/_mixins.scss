/**
 *  Mixins (_mixins.scss)
 *
 *  Mixins for use in your project. Make sure to read the method signatures and descriptions.
 */


/** bp()
 *  Sets rules for a specific breakpoint range.
 *  @param $point The breakpoint alias (e.g. xs, s, m...)
 */
@mixin bp($point) {
  @if ($point == "xs") {
    @media only screen and (min-width: $screen-xs-min) and (max-width: $screen-xs-max) { @content; }
  }

  @else if ($point == "s") {
    @media only screen and (min-width: $screen-s-min) and (max-width: $screen-s-max) { @content; }
  }

  @else if ($point == "m") {
    @media only screen and (min-width: $screen-m-min) and (max-width: $screen-m-max) { @content; }
  }

  @else if ($point == "l") {
    @media only screen and (min-width: $screen-l-min) and (max-width: $screen-l-max) { @content; }
  }

  @else if ($point == "xl") {
    @media only screen and (min-width: $screen-xl-min) and (max-width: $screen-xl-max) { @content; }
  }

  @else if ($point == "xxl") {
    @media only screen and (min-width: $screen-xxl-min) and (max-width: $screen-xxl-max) { @content; }
  }
}


/** bp-min()
 *  Sets rules for a breakpoint range starting from the given alias.
 *  @param $point The breakpoint alias (e.g. xs, s, m...)
 */
@mixin bp-min($point) {
  @if ($point == "xs") {
    @media only screen and (min-width: $screen-xs-min) { @content; }
  }

  @else if ($point == "s") {
    @media only screen and (min-width: $screen-s-min) { @content; }
  }

  @else if ($point == "m") {
    @media only screen and (min-width: $screen-m-min) { @content; }
  }

  @else if ($point == "l") {
    @media only screen and (min-width: $screen-l-min) { @content; }
  }

  @else if ($point == "xl") {
    @media only screen and (min-width: $screen-xl-min) { @content; }
  }

  @else if ($point == "xxl") {
    @media only screen and (min-width: $screen-xxl-min) { @content; }
  }
}


/** bp-max()
 *  Sets rules for a breakpoint range ending with the given alias.
 *  @param $point The breakpoint alias (e.g. xs, s, m...)
 */
@mixin bp-max($point) {
  @if ($point == "xs") {
    @media only screen and (max-width: $screen-xs-max) { @content; }
  }

  @else if ($point == "s") {
    @media only screen and (max-width: $screen-s-max) { @content; }
  }

  @else if ($point == "m") {
    @media only screen and (max-width: $screen-m-max) { @content; }
  }

  @else if ($point == "l") {
    @media only screen and (max-width: $screen-l-max) { @content; }
  }

  @else if ($point == "xl") {
    @media only screen and (max-width: $screen-xl-max) { @content; }
  }

  @else if ($point == "xxl") {
    @media only screen and (max-width: $screen-xxl-max) { @content; }
  }
}



/** rotate()
 *  Rotates an element
 *  @param $deg The number of degrees to rotate
 */
@mixin rotate($deg) {
  transform: rotate(#{$deg}deg);
}


/** rotate-x()
 *  Rotates an element along the X-axis
 *  @param $deg The number of degrees to rotate
 */
@mixin rotate-x($deg) {
  transform: rotate(#{$deg}deg);
}


/** rotate-y()
 *  Rotates an element along the Y-axis
 *  @param $deg The number of degrees to rotate
 */
@mixin rotate-y($deg) {
  transform: rotate(#{$deg}deg);
}


/** scale()
 *  Performs a scale transform on the element
 *  @param $x The scale factor for the X-axis
 *  @param $y The scale factor for the Y-axis
 */
@mixin scale($x, $y) {
  transform: scale(#{$x}, #{$y});
}


/** skew()
 *  Performs a skew transform on the element
 *  @param $x The skew factor for the X-axis
 *  @param $y The skew factor for the Y-axis
 */
@mixin skew($x, $y) {
  transform: skew(#{$x}deg, #{$y}deg);
}



/** keyframes()
 *  Creates a keyframes rule for animations
 *  @param $name The name of the animation
 */
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}


/** animation()
 *  Sets a CSS animation for the element
 *  @param $name The name of the animation
 *  @param $duration The duration of the animation
 *  @param $delay The delay before the animation begins (default is 0)
 */
@mixin animation($name, $duration, $delay: 0) {
  animation-name: $name;
  animation-duration: #{$duration}s;
  animation-delay: #{$delay}s;
  animation-fill-mode: forwards;
}


/** image-2x()
 *  Sets image replacement for retina images
 *  @param $image The URL for the image
 *  @param $width The width of the image
 *  @param $height The height of the image
 */
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}


/** linear-gradient()
 *  Sets a linear gradient background
 *  @param $from The first color of the gradient
 *  @param $to The last color of the gradient
 *  @param $angle The angle of the gradient (default is 0)
 *  @param $start The first stop of the gradient (default is 0%)
 *  @param $stop The final stop of the gradient (default is 100%)
 */
@mixin linear-gradient($from, $to, $angle: 0, $start: 0%, $stop: 100%) {
  background-color: $to;
  background: linear-gradient(#{$angle}deg, $from $start, $to $stop);
}


/** radial-gradient()
 *  Sets a radial gradient background
 *  @param $from The first color of the gradient
 *  @param $to The last color of the gradient
 *  @param $start The first stop of the gradient (default is 0%)
 *  @param $stop The final stop of the gradient (default is 100%)
 */
@mixin radial-gradient($from, $to, $start: 0%, $stop: 100%) {
  background-color: $to;
  background: radial-gradient($from $start, $to $stop);
}



/**  scale()
 *  Correctly scales the typographic attributes of an element based on the framework's configuration
 *  @param $scale The number of steps to scale the element
 *  @param $margin-top The number of margin units to be set above the element (default is 0)
 *  @param $margin-bottom The number of margin units to be set below the element (default is 1)
 */
@mixin scale($scale, $margin-top: 0, $margin-bottom: 1) {
  $font-unit: ($base-font-size / 1rem);
  $line-unit: ($base-line-height / 1rem);

  @if ($scale > 0) {
    $font-size: $font-unit * pow($base-scale-factor, $scale);
    font-size: #{$font-size}rem;

    $line-height-set: false;
    @for $i from 1 through $scale {
      @if ($line-height-set == false) {
        @if (($line-unit * $i) > $font-size) {
          $line-height: ($line-unit * $i);
          line-height: #{$line-height}rem;
          $line-height-set: true;
        }
      }
    }

    @if ($line-height-set == false) {
      $line-height: ($line-unit * ($scale + 1));
      line-height: #{$line-height}rem;
    }
  }

  @else {
    $font-size: $font-unit;
    font-size: #{$font-size}rem;

    $line-height: $line-unit;
    line-height: #{$line-height}rem;
  }

  margin-top: ($base-line-height * $margin-top);
  margin-bottom: ($base-line-height * $margin-bottom);
}
