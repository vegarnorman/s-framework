//	===========
//	GRID SYSTEM
//	===========


//	clearfix()
//	Employs a simple clearfix to elements that need it
@mixin clearfix() {
  &:before, &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}


//	container()
//	Defines the CSS rules for the container element
@mixin container() {
	margin-left: auto;
	margin-right: auto;
	padding: 0;
	width: 96%;

	@if ($grid-type == 'float') {
		@include clearfix();
	}

	@include bp(xs) 	{ max-width: $container-xs; }
	@include bp(s) 		{ max-width: $container-s; }
	@include bp(m) 		{ max-width: $container-m; }
	@include bp(l) 		{ max-width: $container-l; }
	@include bp(xl) 	{ max-width: $container-xl; }
	@include bp(xxl) 	{ max-width: $container-xxl; }
}


//	grid-row()
//	Defines the CSS rules for the row element
@mixin grid-row() {
	width: 100%;
	margin: 0;
	padding: 0;

	@if ($grid-type == 'float') {
		@include clearfix();
	}

	@if ($grid-type == 'flex') {
		box-sizing: border-box;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
	}
}


//	common()
//	Defines the common CSS rules for all grid elements
@mixin common() {
	box-sizing: border-box;
	
	@if ($grid-type == 'float') {
		float: left;
	}

	@if ($grid-type == 'flex') {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		flex-basis: 0%;
		flex-shrink: 0;
	}
}


//	gutters()
//	Defines the CSS rules for grid elements with gutters
@mixin gutters() {
	@if ($grid-type == 'float') {
		margin-left: $gutter;
		margin-right: $gutter;
	}

	@if ($grid-type == 'flex') {
		padding-left: $gutter;
		padding-right: $gutter;
	}
}


//	no-gutters()
//	Defines the CSS rules for grid elements without gutters
@mixin no-gutters() {
	@if ($grid-type == 'float') {
		margin-left: 0;
		margin-right: 0;
	}

	@if ($grid-type == 'flex') {
		padding-left: 0;
		padding-right: 0;
	}
}


//	grid-width()
//	Sets the correct width/flex-basis for grid elements
//	@param $size The number of columns to span
//	@param $gutters true if the calculation should account for gutters, false if not (default is true)
@mixin grid-width($size, $gutters: true) {
	@if ($grid-type == 'float') {
		@if ($gutters == true) {
			width: (100% / $columns) * $size - ($gutter * 2);
		}

		@else {
			width: (100% / $columns) * $size;
		}
	}

	@if ($grid-type == 'flex') {
		flex: 0 0 ((100% / $columns) * $size);
		max-width: ((100% / $columns) * $size);
	}
}


//	grid()
//	Exposes the grid system directly to the rest of the Sass documents, allowing it to be used without having to generate classes
//	@param $size The number of columns to span
//	@param $gutters true if gutters should be applied, false if not (default is true)
@mixin grid($size, $gutters: true) {
	@include common();

	@if ($gutters == true) {
		@include gutters();
		@include grid-width($size, true);
	}

	@else {
		@include no-gutters();
		@include grid-width($size, false);
	}
}



//	If the $verbose-grid variable in _variables.scss is set to true, generate grid rules in the finished CSS
@if ($verbose-grid == true) {

	// If the $grid-type variable is set to 'float', generate traditional float-based grid
	@if ($grid-type == 'float') {

		.container {
			@include container();
		}

		.row {
			@include grid-row();
		}

		.#{$grid-namespace} {
			@include common();
			@include gutters();
		}

		.#{$grid-namespace}.no-gutters {
			@include no-gutters();
		}

		@for $i from 1 through $columns {
			.#{$grid-namespace}.g#{$i} { @include grid-width($i, true); }
		}

		@include bp(xs) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xs#{$i} { @include grid-width($i, true); }
			}
		}

		@include bp(s) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.s#{$i} { @include grid-width($i, true); }
			}
		}

		@include bp(m) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.m#{$i} { @include grid-width($i, true); }
			}
		}

		@include bp(l) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.l#{$i} { @include grid-width($i, true); }
			}
		}

		@include bp(xl) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xl#{$i} { @include grid-width($i, true); }
			}
		}

		@include bp(xxl) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xxl#{$i} { @include grid-width($i, true); }
			}
		}


		@for $i from 1 through $columns {
			.#{$grid-namespace}.g#{$i}.no-gutters { @include grid-width($i, false); }
		}

		@include bp(xs) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xs#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

		@include bp(s) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.s#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

		@include bp(m) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.m#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

		@include bp(l) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.l#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

		@include bp(xl) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xl#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

		@include bp(xxl) {
			@for $i from 1 through $columns {
				.#{$grid-namespace}.xxl#{$i}.no-gutters { @include grid-width($i, false); }
			}
		}

	}


	//	If the $grid-type variable is set to 'flex', generate flexbox grid
	@if ($grid-type == 'flex') {

		[#{$amcss-prefix}container] {
			@include container();
		}

		[#{$amcss-prefix}#{$grid-namespace}-row] {
			@include grid-row();
		}


		// 	Horizontal alignment

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="start"] {
			justify-content: flex-start;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="end"] {
			justify-content: flex-end;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="center"] {
			justify-content: center;
		}


		// 	Vertical alignment

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="top"] {
			align-items: flex-start;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="center"] {
			align-items: center;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="bottom"] {
			align-items: flex-end;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="stretch"] {
			align-items: stretch;
		}


		// 	Distribution

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-distribution~="around"] {
			justify-content: space-around;
		}

		[#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-distribution~="between"] {
			justify-content: space-between;
		}


		// 	Grid units

		[#{$amcss-prefix}#{$grid-namespace}] {
			@include common();
			@include gutters();
		}

		[#{$amcss-prefix}#{$grid-namespace}][no-gutters] {
			@include no-gutters();
		}

		@for $i from 1 through $columns {
			[#{$amcss-prefix}#{$grid-namespace}~="#{$i}"] {
				@include grid-width($i);
			}

			@include bp('xs') {
				[#{$amcss-prefix}#{$grid-namespace}~="xs-#{$i}"] {
					@include grid-width($i);
				}
			}

			@include bp('s') {
				[#{$amcss-prefix}#{$grid-namespace}~="s-#{$i}"] {
					@include grid-width($i);
				}
			}

			@include bp('m') {
				[#{$amcss-prefix}#{$grid-namespace}~="m-#{$i}"] {
					@include grid-width($i);
				}
			}

			@include bp('l') {
				[#{$amcss-prefix}#{$grid-namespace}~="l-#{$i}"] {
					@include grid-width($i);
				}
			}

			@include bp('xl') {
				[#{$amcss-prefix}#{$grid-namespace}~="xl-#{$i}"] {
					@include grid-width($i);
				}
			}

			@include bp('xxl') {
				[#{$amcss-prefix}#{$grid-namespace}~="xxl-#{$i}"] {
					@include grid-width($i);
				}
			}
		}
	}
}
