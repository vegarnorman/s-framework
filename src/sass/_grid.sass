//	===========
//	GRID SYSTEM
//	===========

//	clearfix()
//	Employs a simple clearfix to elements that need it
=clearfix
  &:before, &:after
    content: ' '
    display: table
  &:after
    clear: both

//	container()
//	Defines the CSS rules for the container element
=container
  margin-left: auto
  margin-right: auto
  padding: 0
  width: 96%
  @if $grid-type == "float"
    +clearfix
  +bp(xs)
    max-width: $container-xs

  +bp(s)
    max-width: $container-s

  +bp(m)
    max-width: $container-m

  +bp(l)
    max-width: $container-l

  +bp(xl)
    max-width: $container-xl

  +bp(xxl)
    max-width: $container-xxl

//	grid-row()
//	Defines the CSS rules for the row element
=grid-row
  width: 100%
  margin: 0
  padding: 0
  @if $grid-type == "float"
    +clearfix
  @if $grid-type == "flex"
    box-sizing: border-box
    display: flex
    flex-direction: row
    flex-wrap: wrap

//	common()
//	Defines the common CSS rules for all grid elements
=common
  box-sizing: border-box
  @if $grid-type == "float"
    float: left
  @if $grid-type == "flex"
    display: flex
    flex-direction: column
    flex-grow: 1
    flex-basis: 0%
    flex-shrink: 0

//	gutters()
//	Defines the CSS rules for grid elements with gutters
=gutters
  @if $grid-type == "float"
    margin-left: $gutter
    margin-right: $gutter
  @if $grid-type == "flex"
    padding-left: $gutter
    padding-right: $gutter

//	no-gutters()
//	Defines the CSS rules for grid elements without gutters
=no-gutters
  @if $grid-type == "float"
    margin-left: 0
    margin-right: 0
  @if $grid-type == "flex"
    padding-left: 0
    padding-right: 0

//	grid-width()
//	Sets the correct width/flex-basis for grid elements
//	@param $size The number of columns to span
//	@param $gutters true if the calculation should account for gutters, false if not (default is true)
=grid-width($size, $gutters: true)
  @if $grid-type == "float"
    @if $gutters == true
      width: 100% / $columns * $size - $gutter * 2
    @else
      width: 100% / $columns * $size
  @if $grid-type == "flex"
    flex: 0 0 100% / $columns * $size
    max-width: 100% / $columns * $size

//	grid()
//	Exposes the grid system directly to the rest of the Sass documents, allowing it to be used without having to generate classes
//	@param $size The number of columns to span
//	@param $gutters true if gutters should be applied, false if not (default is true)
=grid($size, $gutters: true)
  +common
  @if $gutters == true
    +gutters
    +grid-width($size, true)
  @else
    +no-gutters
    +grid-width($size, false)

//	If the $verbose-grid variable in _variables.scss is set to true, generate grid rules in the finished CSS
@if $verbose-grid == true
  // If the $grid-type variable is set to 'float', generate traditional float-based grid
  @if $grid-type == "float"
    .container
      +container
    .row
      +grid-row
    .#{$grid-namespace}
      +common
      +gutters
    .#{$grid-namespace}.no-gutters
      +no-gutters
    @for $i from 1 through $columns
      .#{$grid-namespace}.g#{$i}
        +grid-width($i, true)
    +bp(xs)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xs#{$i}
          +grid-width($i, true)

    +bp(s)
      @for $i from 1 through $columns
        .#{$grid-namespace}.s#{$i}
          +grid-width($i, true)

    +bp(m)
      @for $i from 1 through $columns
        .#{$grid-namespace}.m#{$i}
          +grid-width($i, true)

    +bp(l)
      @for $i from 1 through $columns
        .#{$grid-namespace}.l#{$i}
          +grid-width($i, true)

    +bp(xl)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xl#{$i}
          +grid-width($i, true)

    +bp(xxl)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xxl#{$i}
          +grid-width($i, true)

    @for $i from 1 through $columns
      .#{$grid-namespace}.g#{$i}.no-gutters
        +grid-width($i, false)
    +bp(xs)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xs#{$i}.no-gutters
          +grid-width($i, false)

    +bp(s)
      @for $i from 1 through $columns
        .#{$grid-namespace}.s#{$i}.no-gutters
          +grid-width($i, false)

    +bp(m)
      @for $i from 1 through $columns
        .#{$grid-namespace}.m#{$i}.no-gutters
          +grid-width($i, false)

    +bp(l)
      @for $i from 1 through $columns
        .#{$grid-namespace}.l#{$i}.no-gutters
          +grid-width($i, false)

    +bp(xl)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xl#{$i}.no-gutters
          +grid-width($i, false)

    +bp(xxl)
      @for $i from 1 through $columns
        .#{$grid-namespace}.xxl#{$i}.no-gutters
          +grid-width($i, false)
  //	If the $grid-type variable is set to 'flex', generate flexbox grid
  @if $grid-type == "flex"
    [#{$amcss-prefix}container]
      +container
    [#{$amcss-prefix}#{$grid-namespace}-row]
      +grid-row
    // 	Horizontal alignment
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="start"]
      justify-content: flex-start
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="end"]
      justify-content: flex-end
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-align~="center"]
      justify-content: center
    // 	Vertical alignment
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="top"]
      align-items: flex-start
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="center"]
      align-items: center
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="bottom"]
      align-items: flex-end
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-vertical-align~="stretch"]
      align-items: stretch
    // 	Distribution
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-distribution~="around"]
      justify-content: space-around
    [#{$amcss-prefix}#{$grid-namespace}-row][#{$amcss-prefix}#{$grid-namespace}-distribution~="between"]
      justify-content: space-between
    // 	Grid units
    [#{$amcss-prefix}#{$grid-namespace}]
      +common
      +gutters
    [#{$amcss-prefix}#{$grid-namespace}][no-gutters]
      +no-gutters
    @for $i from 1 through $columns
      [#{$amcss-prefix}#{$grid-namespace}~="#{$i}"]
        +grid-width($i)
      +bp("xs")
        [#{$amcss-prefix}#{$grid-namespace}~="xs-#{$i}"]
          +grid-width($i)

      +bp("s")
        [#{$amcss-prefix}#{$grid-namespace}~="s-#{$i}"]
          +grid-width($i)

      +bp("m")
        [#{$amcss-prefix}#{$grid-namespace}~="m-#{$i}"]
          +grid-width($i)

      +bp("l")
        [#{$amcss-prefix}#{$grid-namespace}~="l-#{$i}"]
          +grid-width($i)

      +bp("xl")
        [#{$amcss-prefix}#{$grid-namespace}~="xl-#{$i}"]
          +grid-width($i)

      +bp("xxl")
        [#{$amcss-prefix}#{$grid-namespace}~="xxl-#{$i}"]
          +grid-width($i)
